const width = 600;
const height = 350;

function getNewZoomProps(newZoomScale, oldZoomScale, oldZoomX, oldZoomY, width, height) {
  // Some math is required here in order to ensure that whatever is in the center of the viewport
  // remains in the center of the viewport after zooming in/out.
  // It's possible to only update zoomScale (and not zoomX & zoomY), but doing so will zoom relative to the
  // top left corner of the chart, rather than viewport center.

  return {
    zoomX: width / 2 - newZoomScale / oldZoomScale * (width / 2 - oldZoomX),
    zoomY: height / 2 - newZoomScale / oldZoomScale * (height / 2 - oldZoomY),
    zoomScale: newZoomScale
  };
}

class ZoomControlledExample extends React.Component {
  state = {
    zoomTransform: {k: 1, x: 0, y: 0},
    zoomX: 0,
    zoomY: 0,
    zoomScale: 1
  };

  handleZoom = nextZoomTransform => {
    // callback called when user has zoomed (or panned)
    // pass the new zoom transform from callback back down as props
    if (!nextZoomTransform) return;
    this.setState({
      zoomX: nextZoomTransform.x,
      zoomY: nextZoomTransform.y,
      zoomScale: nextZoomTransform.k
    });
  };
  handleClickZoomIn = () => {
    const {zoomScale, zoomX, zoomY} = this.state;
    const newZoomScale = this.state.zoomScale * 1.25;
    this.setState(getNewZoomProps(newZoomScale, zoomScale, zoomX, zoomY, width, height));
  };
  handleClickZoomOut = () => {
    const {zoomScale, zoomX, zoomY} = this.state;
    const newZoomScale = this.state.zoomScale / 1.25;
    this.setState(getNewZoomProps(newZoomScale, zoomScale, zoomX, zoomY, width, height));
  };

  render() {
    return (
      <div>
        <ZoomContainer
          width={width}
          height={height}
          onZoom={this.handleZoom}
          controlled={true}
          zoomX={this.state.zoomX}
          zoomY={this.state.zoomY}
          zoomScale={this.state.zoomScale}
          disableMouseWheelZoom={true}
        >
          <XYPlot scaleType="linear" width={600} height={350}>
            <XAxis title="Phase" />
            <YAxis title="Intensity" />
            <LineChart data={_.range(100)} x={d => d} y={d => Math.sin(d * 0.1)} />
          </XYPlot>
        </ZoomContainer>
        <div>
          <button onClick={this.handleClickZoomIn}>[+] Zoom In</button>
          <button onClick={this.handleClickZoomOut}>[-] Zoom Out</button>
        </div>
      </div>
    );
  }
}

ReactDOM.render(<ZoomControlledExample />, mountNode);
